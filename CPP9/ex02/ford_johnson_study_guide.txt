🔄 FORD-JOHNSON SORT - COMPLETE GUIDE
====================================

📝 WHAT IS IT?
-------------
A clever sorting algorithm that:
1. Groups numbers in pairs
2. Sorts bigger numbers first
3. Smartly inserts smaller numbers
4. Handles leftover numbers carefully

🎯 HOW IT WORKS (WITH EXAMPLE)
----------------------------
Starting with: [3, 1, 4, 2, 5]

1. Make Pairs:
   (3,1) (4,2) [5]
   Bigger numbers: 3, 4
   Smaller numbers: 1, 2
   Leftover: 5

2. Sort bigger numbers:
   3, 4

3. Insert smaller numbers:
   1 → [3, 4] = [1, 3, 4]
   2 → [1, 3, 4] = [1, 2, 3, 4]

4. Insert leftover:
   5 → [1, 2, 3, 4] = [1, 2, 3, 4, 5]

🔍 DEEP DIVE
-----------
Why it's special:
- Works in pairs (like sorting with a friend!)
- Reduces number of comparisons
- Very efficient for larger datasets
- Can work with different containers

🛠️ TWO WAYS TO STORE NUMBERS
--------------------------
Vector (like an array):
✓ Fast to find positions
✓ Good for random access
× Slower for inserting

List (like a chain):
✓ Fast for inserting
✓ Flexible structure
× Slower to find positions

⚡ PERFORMANCE
------------
Speed:
- Usually: O(n log n)
- Best case: O(n)
- Space needed: O(n)

🧪 TESTING CHECKLIST
------------------
Try sorting:
□ Even numbers: [1, 4, 2, 3]
□ Odd numbers: [1, 4, 2, 3, 5]
□ Already sorted: [1, 2, 3, 4]
□ Reverse sorted: [4, 3, 2, 1]
□ Repeated numbers: [2, 2, 2, 2]
□ Single number: [1]
□ Empty sequence: []

💡 KEY POINTS TO REMEMBER
----------------------
1. Always pair numbers first
2. Sort bigger numbers recursively
3. Insert smaller numbers smartly
4. Handle leftover number last
5. Different containers = different strategies
6. Both implementations follow same logic
7. Binary search makes vector insertion smart
8. Lists are quick at inserting but slow at searching

🎓 FOR THE EVALUATION
-------------------
Be ready to explain:

1. Why we pair numbers
   Answer: Pairing numbers reduces the total comparisons needed. By sorting pairs 
   first, we create a partially sorted sequence that makes later insertions more 
   efficient. It's like sorting two numbers at once!

2. How recursive sorting helps
   Answer: Recursive sorting breaks down the big problem into smaller ones. 
   We first sort the larger numbers of each pair, creating a strong "backbone" 
   of sorted numbers. This makes inserting the smaller numbers much easier and 
   more efficient.

3. Why we use two containers
   Answer: Using both vector and list shows how the same algorithm can work 
   differently with different data structures:
   - Vectors are great for binary search (finding where to put numbers quickly)
   - Lists are great for insertion (adding numbers without moving everything)
   This demonstrates understanding of container trade-offs!

4. How insertion works differently in each container
   Answer:
   Vector: Uses binary search (divide and conquer) to find insertion position 
          quickly, but needs to shift elements to make space
   List: Uses linear search (one by one) to find position, but can insert 
         instantly without shifting other elements

5. What makes this algorithm special
   Answer: Ford-Johnson combines three clever ideas:
   - Pairing numbers to reduce comparisons
   - Recursive sorting of larger elements
   - Smart insertion strategy
   This makes it very efficient for situations where comparisons are expensive!

Remember: The beauty of Ford-Johnson is how it cleverly combines pairing, 
sorting, and insertion to create an efficient sorting method! 